Beskriv program helvetet :)

Placement of the sensors
* We placed our sensors so that our trains would not derail
in high velocities but still have a good flow. This also applies
to the switches because the train should not glide into 
our shared tracks and collide with each other.

Choice of critical sections
* The two joined sections after each station were our main priority.
This because only one train can be there on any given time. 

Maximum train speed and the reason for it
* Our maximum speed is 26 because 27 is to fast for the trains to
stop before we reach the switch. And therefore we choose 26 otherwise
we would have a collision.

How you tested your solution
* We printed our available permits for each semaphore to ensure that we
never released one too many permits. And we also created a statement
that would exit the program if any of the semaphores had more than one
permit available. We ran this with several diffrent configurations and
it never collided nor did it exit.

* Code that we ran for our testing

if(sharedUpper.availablePermits() > 1 ||
	sharedDual.availablePermits() > 1 ||
	sharedLower.availablePermits() > 1 || 
	lowerMainTrack.availablePermits() > 1 || 
	upperMainTrack.availablePermits() > 1 || 
	crossing.availablePermits() > 1) {
		System.out.println("sharedupper: " + sharedUpper.availablePermits());
		System.out.println("sharedLower: " + sharedLower.availablePermits());
		System.out.println("sharedDual: " + sharedDual.availablePermits());
		System.out.println("lowerMainTrack: " + lowerMainTrack.availablePermits());
		System.out.println("upperMainTrack: " + upperMainTrack.availablePermits());
		System.out.println("crossing: " + crossing.availablePermits());
		System.exit(1);
}